-----------------------  Assignment Day3 ¨CSQL:  Comprehensive practice ------------------------------
/*
Answer following questions
1.	In SQL Server, assuming you can find the result by using both joins and subqueries, which one would you prefer to use and why?
	In most cases, Join is better than subqueries, since Join runs faster than subqueries, it has a better performance.

2.	What is CTE and when to use it?
	CTE(common table  expression): is a temporary result set that you can reference within another SELECT, INSERT, UPDATE, or DELETE statement. 
	A CTE can be used to: 
	(1) Create a recursive query.
	(2) Substitute for a view when the general use of a view is not required; that is, you do not have to store the definition in metadata.
	(3) Using a CTE offers the advantages of improved readability and ease in maintenance of complex queries. The query can be divided into separate, 
		simple, logical building blocks. These simple blocks can then be used to build more complex, interim CTEs until the final result set is generated. 	
	(4) CTEs can be defined in user-defined routines, such as functions, stored procedures, triggers, or views.

3.	What are Table Variables? What is their scope and where are they created in SQL Server?
	Table variable is a special type of the local variable that helps to store data temporarily.
	The lifetime of the table variable only lasts for the duration of the batch, function, or stored procedure;
	Temp Variables are also created in the Tempdb database. 
	
4.	What is the difference between DELETE and TRUNCATE? Which one will have better performance and why?
	(1) Truncate reseeds identity values, whereas delete doesn't.
	(2) Truncate removes all records and doesn't fire triggers.
	(3) Truncate is faster compared to delete as it makes less use of the transaction log.
	(4) Truncate is not possible when a table is referenced by a Foreign Key or tables are used in replication or with indexed views.

5.	What is Identity column? How does DELETE and TRUNCATE affect it?
	Identity column is a column in a database table that is made up of values generated by the database. It has two arguments, seed and increment.

6.	What is difference between ¡°delete from table_name¡± and ¡°truncate table table_name¡±?
	The first is DML, another is DDL.
*/

/*
Write queries for following scenarios
All scenarios are based on Database NORTHWND.
1.	List all cities that have both Employees and Customers.
*/
USE Northwind 
SELECT City
FROM  Employees
UNION
SELECT City
FROM  Customers
GO

/*
2.	List all cities that have Customers but no Employee.
a.	Use sub-query
b.	Do not use sub-query
*/
USE Northwind 
SELECT City FROM  Employees
WHERE City NOT IN (SELECT City FROM  Customers)
GO

USE Northwind 
SELECT City FROM  Employees
EXCEPT 
SELECT City FROM  Customers
GO

/*
3.	List all products and their total order quantities throughout all orders.
*/
USE Northwind 
SELECT p.ProductName, SUM(od.Quantity) AS Qty
FROM Products p
INNER JOIN [Order Details] od
ON p.ProductID = od.ProductID
GROUP BY p.ProductName
GO

/*
4.	List all Customer Cities and total products ordered by that city.
*/
USE Northwind 
SELECT c.City, SUM(od.Quantity) AS Qty
FROM Customers c
INNER JOIN Orders o
ON c.CustomerID = o.CustomerID
INNER JOIN [Order Details] od
ON o.OrderID = od.OrderID
GROUP BY c.city
ORDER BY c.city
GO

/*
5.	List all Customer Cities that have at least two customers.
a.	Use union ??????? Rank????
b.	Use sub-query and no union
*/
USE Northwind 
SELECT City FROM Customers GROUP BY City HAVING COUNT(1) > 1
GO

USE Northwind 
SELECT DISTINCT c.City
FROM (SELECT City, RANK() OVER(PARTITION BY City ORDER BY CompanyName) AS rnk FROM Customers) AS c
WHERE c.rnk > 1
GO

/*
6.	List all Customer Cities that have ordered at least two different kinds of products.
*/
USE Northwind 
SELECT c.City
FROM Customers c
INNER JOIN Orders o
ON c.CustomerID = o.CustomerID
INNER JOIN [Order Details] od
ON o.OrderID = od.OrderID
GROUP BY City
HAVING COUNT(DISTINCT od.ProductID) > 1
GO

/*
7.	List all Customers who have ordered products, but have the ¡®ship city¡¯ on the order different from their own customer cities.
*/
USE Northwind 
SELECT DISTINCT c.CompanyName
FROM Customers c
INNER JOIN Orders o
ON c.CustomerID = o.CustomerID AND c.City <> o.ShipCity
GO

/*
8.	List 5 most popular products, their average price, and the customer city that ordered most quantity of it.
*/
SELECT * FROM [Order Details] ORDER BY ProductID

WITH cte_city_qty
AS (
SELECT *
FROM Customers c
INNER JOIN Orders o
ON c.CustomerID = o.CustomerID
INNER JOIN [Order Details] od
ON o.OrderID = od.OrderID)

SELECT p.ProductName, c.City, SUM(Quantity) AS Qty, AVG(od.UnitPrice) AS Price
FROM [Order Details] od
INNER JOIN Orders o
ON od.OrderID = o.OrderID
INNER JOIN Customers c
ON o.CustomerID = c.CustomerID
INNER JOIN Products p
ON p.ProductID = od.ProductID
GROUP BY p.ProductName, c.City
ORDER BY p.ProductName


/*
9.	List all cities that have never ordered something but we have employees there.
a.	Use sub-query
b.	Do not use sub-query
*/
USE Northwind 
SELECT City
FROM Employees
WHERE EmployeeID NOT IN (SELECT EmployeeID FROM Orders)
GO

/*
10.	List one city, if exists, that is the city from where the employee sold most orders (not the product quantity) is, and also the city of most total quantity of products ordered from. (tip: join  sub-query)
*/
USE Northwind 
SELECT City, COUNT(o.OrderID) AS odr_cnt, SUM(od.Quantity) AS prd_cnt
FROM Employees e
INNER JOIN Orders o
ON e.EmployeeID = o.EmployeeID
INNER JOIN [Order Details] od
ON o.OrderID = od.OrderID
GROUP BY e.City
GO

select * from orders
select * from [Order Details]
select * from Customers
select * from Employees
select * from Products
/*
11. How do you remove the duplicates record of a table?
*/
SELECT *, COUNT(*) AS CNT
FROM [TABLE_NAME]
GROUP BY *
HAVING COUNT(*) = 1;

/*
12. Sample table to be used for solutions below- Employee ( empid integer, mgrid integer, deptid integer, salary integer) Dept (deptid integer, deptname text)
 Find employees who do not manage anybody.
*/
CREATE TABLE Employee(
	empid integer, 
	mgrid integer, 
	deptid integer, 
	salary integer)
CREATE TABLE Dept (
	deptid integer, 
	deptname text)

SELECT a.empid
FROM Employee a
INNER JOIN Employee b
ON a.empid = b.mgrid
WHERE b.empid IS NULL
/*
13. Find departments that have maximum number of employees. (solution should consider scenario having more than 1 departments that have maximum number of employees). Result should only have - deptname, count of employees sorted by deptname.
*/
SELECT deptname, Rank() OVER(PARTITION BY deptname ORDER BY deptname) AS cnt
FROM Dept d
INNER JOIN Employee e
ON d.deptid = e.deptid

/*
14. Find top 3 employees (salary based) in every department. Result should have deptname, empid, salary sorted by deptname and then employee with high to low salary.
*/
SELECT deptname, empid, salary FROM
(SELECT deptname, empid, salary, DENSE_RANK() OVER(PARTITION BY deptname ORDER BY deptname ASC, salary DESC) AS rnt
FROM Dept d
INNER JOIN Employee e
ON d.deptid = e.deptid) AS t
WHERE t.rnt IN (1,2,3)